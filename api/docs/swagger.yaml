definitions:
  dto.LoginDTO:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.SignupDTO:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
      second_name:
        type: string
      third_name:
        type: string
    required:
    - email
    - name
    - password
    - second_name
    type: object
  models.Role:
    properties:
      description:
        type: string
      id:
        type: integer
      type:
        type: string
    type: object
  models.User:
    properties:
      email:
        type: string
      name:
        maxLength: 100
        minLength: 2
        type: string
      password:
        minLength: 6
        type: string
      phone_number:
        type: string
      role_id:
        type: integer
      second_name:
        maxLength: 100
        minLength: 2
        type: string
      third_name:
        type: string
    required:
    - email
    - name
    - password
    - phone_number
    - role_id
    - second_name
    type: object
host: localhost:8080
info:
  contact: {}
  description: REST-API for game store
  title: Game Store
  version: "1.0"
paths:
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: This endpoint allows the user to log in by providing email and
        password. It checks if the user exists, verifies the password, generates access
        and refresh tokens, updates the tokens in the database, and sets them as cookies
        in the response.
      parameters:
      - description: User credentials (email and password)
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dto.LoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged in and returned user data
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid input
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Email or password is incorrect
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Logs in a user and returns access and refresh tokens
      tags:
      - Users
  /api/v1/auth/signup:
    post:
      consumes:
      - application/json
      description: 'This endpoint allows you to register a new user by providing required
        fields: name, second_name, email, phone_number, password, and role_id. It
        validates the input, hashes the password, and saves the user in the database.'
      parameters:
      - description: User data to register
        in: body
        name: signup
        required: true
        schema:
          $ref: '#/definitions/dto.SignupDTO'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Email or phone number already in use
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Registers a new user
      tags:
      - Users
  /api/v1/roles:
    get:
      description: This endpoint allows an admin to fetch all roles.
      produces:
      - application/json
      responses:
        "200":
          description: List of roles
          schema:
            items:
              $ref: '#/definitions/models.Role'
            type: array
        "403":
          description: Forbidden, only admins can access roles
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get all roles
      tags:
      - Roles
    post:
      consumes:
      - application/json
      description: This endpoint allows an admin to create a new role by providing
        the role type and description.
      parameters:
      - description: Role data
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/models.Role'
      produces:
      - application/json
      responses:
        "201":
          description: Role created successfully
          schema:
            $ref: '#/definitions/models.Role'
        "400":
          description: Invalid input
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden, only admins can create roles
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new role
      tags:
      - Roles
  /api/v1/roles/{role_id}:
    delete:
      description: This endpoint allows an admin to delete a role by its ID.
      parameters:
      - description: Role ID
        in: path
        name: role_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Role deleted successfully
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden, only admins can delete roles
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Role not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a role
      tags:
      - Roles
    get:
      description: This endpoint allows an admin to fetch a role by its ID.
      parameters:
      - description: Role ID
        in: path
        name: role_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Role found
          schema:
            $ref: '#/definitions/models.Role'
        "403":
          description: Forbidden, only admins can access roles
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Role not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get role by ID
      tags:
      - Roles
    patch:
      consumes:
      - application/json
      description: This endpoint allows an admin to update a role by providing its
        ID and new data.
      parameters:
      - description: Role ID
        in: path
        name: role_id
        required: true
        type: integer
      - description: Updated role data
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/models.Role'
      produces:
      - application/json
      responses:
        "200":
          description: Role updated successfully
          schema:
            $ref: '#/definitions/models.Role'
        "400":
          description: Invalid input
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden, only admins can update roles
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Role not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Update a role
      tags:
      - Roles
  /api/v1/users:
    get:
      consumes:
      - application/json
      description: Fetches a list of all users from the database. Only admins can
        access this endpoint.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved all users
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to fetch users
          schema:
            additionalProperties: true
            type: object
      summary: Get all users
      tags:
      - Users
  /api/v1/users/{user_id}:
    get:
      consumes:
      - application/json
      description: Fetches a user by their ID from the database. The user making the
        request must be authorized to access the requested user data. User can get
        access only to their data. Admin can get access to all users data.
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the user data
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid user ID
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to fetch user
          schema:
            additionalProperties: true
            type: object
      summary: Get a user by ID
      tags:
      - Users
    patch:
      consumes:
      - application/json
      description: Allows updating specific fields of a user. The user making the
        request must be authorized to update the specified user data. User can update
        only their own data. Admin can update all users data.
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: User data to update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated the user
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid input
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to update user
          schema:
            additionalProperties: true
            type: object
      summary: Update a user's data
      tags:
      - Users
swagger: "2.0"
