definitions:
  dto.CartDTO:
    properties:
      games:
        items:
          $ref: '#/definitions/models.Game'
        type: array
      id:
        type: integer
      user_id:
        type: integer
    type: object
  dto.CategoryDTO:
    properties:
      description:
        type: string
      name:
        type: string
    required:
    - description
    - name
    type: object
  dto.DeveloperDTO:
    properties:
      country:
        type: string
      description:
        type: string
      email:
        type: string
      name:
        type: string
    required:
    - country
    - description
    - email
    - name
    type: object
  dto.FavoriteDTO:
    properties:
      games:
        items:
          $ref: '#/definitions/models.Game'
        type: array
      id:
        type: integer
      user_id:
        type: integer
    type: object
  dto.GameDTO:
    properties:
      age_restriction:
        type: string
      category_ids:
        items:
          type: integer
        type: array
      description:
        type: string
      developer_id:
        type: integer
      name:
        type: string
      price:
        type: number
      restrict_ids:
        items:
          type: integer
        type: array
      size:
        type: number
    required:
    - developer_id
    - name
    - price
    type: object
  dto.LibraryDTO:
    properties:
      games:
        items:
          $ref: '#/definitions/models.Game'
        type: array
      id:
        type: integer
      user_id:
        type: integer
    type: object
  dto.OrderDTO:
    properties:
      created_at:
        type: string
      games:
        items:
          $ref: '#/definitions/models.Game'
        type: array
      id:
        type: integer
      total_cost:
        type: number
      user_id:
        type: integer
    type: object
  dto.RestrictDTO:
    properties:
      game_id:
        type: integer
      region:
        type: string
    required:
    - game_id
    - region
    type: object
  dto.ReviewDTO:
    properties:
      description:
        type: string
      rating:
        type: integer
      title:
        type: string
    type: object
  dto.UserLoginDTO:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.UserSignupDTO:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
      phone_number:
        type: string
      second_name:
        type: string
      third_name:
        type: string
    required:
    - email
    - name
    - password
    - second_name
    type: object
  dto.UserUpdateDTO:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      phone_number:
        type: string
      role_id:
        type: integer
      second_name:
        type: string
      third_name:
        type: string
    type: object
  models.Category:
    properties:
      created_at:
        type: string
      description:
        type: string
      games:
        items:
          $ref: '#/definitions/models.Game'
        type: array
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.Developer:
    properties:
      country:
        type: string
      created_at:
        type: string
      description:
        type: string
      email:
        type: string
      games:
        items:
          $ref: '#/definitions/models.Game'
        type: array
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.Game:
    properties:
      age_restriction:
        type: string
      categories:
        items:
          $ref: '#/definitions/models.Category'
        type: array
      created_at:
        type: string
      description:
        type: string
      developer:
        $ref: '#/definitions/models.Developer'
      developer_id:
        type: integer
      id:
        type: integer
      name:
        type: string
      price:
        type: number
      restricts:
        items:
          $ref: '#/definitions/models.Restrict'
        type: array
      size:
        type: number
      updated_at:
        type: string
    type: object
  models.Restrict:
    properties:
      game_id:
        type: integer
      id:
        type: integer
      region:
        type: string
    type: object
  models.Review:
    properties:
      created_at:
        type: string
      description:
        type: string
      game:
        $ref: '#/definitions/models.Game'
      game_id:
        type: integer
      id:
        type: integer
      rating:
        type: integer
      title:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.Role:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      type:
        type: string
      updated_at:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        maxLength: 100
        minLength: 2
        type: string
      password:
        minLength: 6
        type: string
      payment_info:
        type: string
      phone_number:
        type: string
      refresh_token:
        type: string
      role:
        $ref: '#/definitions/models.Role'
      role_id:
        type: integer
      second_name:
        maxLength: 100
        minLength: 2
        type: string
      third_name:
        type: string
      token:
        type: string
      updated_at:
        type: string
    required:
    - email
    - name
    - password
    - phone_number
    - second_name
    type: object
host: localhost:8080
info:
  contact: {}
  description: REST-API for gameControllers store
  title: Game Store
  version: "1.0"
paths:
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: This endpoint allows the userControllers to log in by providing
        email and password. It checks if the userControllers exists, verifies the
        password, generates access and refresh tokens, updates the tokens in the database,
        and sets them as cookies in the response.
      parameters:
      - description: User credentials (email and password)
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dto.UserLoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged in and returned userControllers data
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid input
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Email or password is incorrect
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Logs in a User and returns user data
      tags:
      - Users
  /api/v1/auth/signup:
    post:
      consumes:
      - application/json
      description: 'This endpoint allows you to register a new User by providing required
        fields: name, second_name, email, phone_number, password, and role_id. It
        validates the input, hashes the password, and saves the userControllers in
        the database. Also, it creates shoppingCart for this user'
      parameters:
      - description: User data to register
        in: body
        name: signup
        required: true
        schema:
          $ref: '#/definitions/dto.UserSignupDTO'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Email or phone number already in use
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Registers a new User
      tags:
      - Users
  /api/v1/cart/{user_id}:
    get:
      consumes:
      - application/json
      description: Get the user's shopping cart contents
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CartDTO'
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get Shopping Cart
      tags:
      - ShoppingCart
  /api/v1/cart/{user_id}/add/{game_id}:
    post:
      consumes:
      - application/json
      description: Add a specific game to the user's shopping cart
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: Game ID
        in: path
        name: game_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Add Game to Shopping Cart
      tags:
      - ShoppingCart
  /api/v1/cart/{user_id}/clear:
    delete:
      consumes:
      - application/json
      description: Clear all games from the user's shopping cart
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Clear Shopping Cart
      tags:
      - ShoppingCart
  /api/v1/cart/{user_id}/remove/{game_id}:
    delete:
      consumes:
      - application/json
      description: Remove a specific game from the user's shopping cart
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: Game ID
        in: path
        name: game_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Remove Game from Shopping Cart
      tags:
      - ShoppingCart
  /api/v1/categories:
    get:
      consumes:
      - application/json
      description: Get all categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Category'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get All Categories
      tags:
      - Category
    post:
      consumes:
      - application/json
      description: Create a new category
      parameters:
      - description: Category Data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/dto.CategoryDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Category'
        "400":
          description: Validation Error
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create Category
      tags:
      - Category
  /api/v1/categories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Category Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Delete Category
      tags:
      - Category
    get:
      consumes:
      - application/json
      description: Get a category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Category'
        "404":
          description: Category Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Get Category
      tags:
      - Category
    patch:
      consumes:
      - application/json
      description: Update a category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Category Data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/dto.CategoryDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Category'
        "400":
          description: Validation Error
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Category Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Update Category
      tags:
      - Category
  /api/v1/categories/paginated:
    get:
      consumes:
      - application/json
      description: Get categories with pagination
      parameters:
      - description: Page number
        in: query
        name: page
        required: true
        type: integer
      - description: Page size
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Paginated Categories
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get Paginated Categories
      tags:
      - Category
  /api/v1/developers:
    get:
      consumes:
      - application/json
      description: Get all developers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Developer'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get All Developers
      tags:
      - Developer
    post:
      consumes:
      - application/json
      description: Create a new developer
      parameters:
      - description: Developer Data
        in: body
        name: developer
        required: true
        schema:
          $ref: '#/definitions/dto.DeveloperDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Developer'
        "400":
          description: Validation Error
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create Developer
      tags:
      - Developer
  /api/v1/developers/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a developer by ID
      parameters:
      - description: Developer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Developer Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Delete Developer
      tags:
      - Developer
    get:
      consumes:
      - application/json
      description: Get a developer by ID
      parameters:
      - description: Developer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Developer'
        "404":
          description: Developer Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Get Developer
      tags:
      - Developer
    patch:
      consumes:
      - application/json
      description: Update a developer
      parameters:
      - description: Developer ID
        in: path
        name: id
        required: true
        type: integer
      - description: Developer Data
        in: body
        name: developer
        required: true
        schema:
          $ref: '#/definitions/dto.DeveloperDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Developer'
        "400":
          description: Validation Error
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Developer Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Update Developer
      tags:
      - Developer
  /api/v1/developers/paginated:
    get:
      consumes:
      - application/json
      description: Get developers with pagination
      parameters:
      - description: Page number
        in: query
        name: page
        required: true
        type: integer
      - description: Page size
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Paginated Developers
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get Paginated Developers
      tags:
      - Developer
  /api/v1/favorite/{user_id}:
    get:
      consumes:
      - application/json
      description: Get the user's favorite contents
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.FavoriteDTO'
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get favorite
      tags:
      - Favorite
  /api/v1/favorite/{user_id}/add/{game_id}:
    post:
      consumes:
      - application/json
      description: Add a specific game to the user's favorite
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: Game ID
        in: path
        name: game_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Add Game to favorite
      tags:
      - Favorite
  /api/v1/favorite/{user_id}/clear:
    delete:
      consumes:
      - application/json
      description: Clear all games from the user's favorite
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Clear favorite
      tags:
      - Favorite
  /api/v1/favorite/{user_id}/remove/{game_id}:
    delete:
      consumes:
      - application/json
      description: Remove a specific game from the user's favorite
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: Game ID
        in: path
        name: game_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Remove Game from favorite
      tags:
      - Favorite
  /api/v1/games:
    get:
      consumes:
      - application/json
      description: Get all games
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Game'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get All Games
      tags:
      - Game
    post:
      consumes:
      - application/json
      description: Create a new gameControllers
      parameters:
      - description: Game Data
        in: body
        name: gameControllers
        required: true
        schema:
          $ref: '#/definitions/dto.GameDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Game'
        "400":
          description: Validation Error
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create Game
      tags:
      - Game
  /api/v1/games/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a gameControllers by ID
      parameters:
      - description: Game ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Game Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Delete Game
      tags:
      - Game
    get:
      consumes:
      - application/json
      description: Get a gameControllers by ID
      parameters:
      - description: Game ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Game'
        "404":
          description: Game Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Get Game
      tags:
      - Game
    patch:
      consumes:
      - application/json
      description: Update a gameControllers
      parameters:
      - description: Game ID
        in: path
        name: id
        required: true
        type: integer
      - description: Game Data
        in: body
        name: gameControllers
        required: true
        schema:
          $ref: '#/definitions/dto.GameDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Game'
        "400":
          description: Validation Error
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Game Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Update Game
      tags:
      - Game
  /api/v1/games/paginated:
    get:
      consumes:
      - application/json
      description: Get games with pagination
      parameters:
      - description: Page number
        in: query
        name: page
        required: true
        type: integer
      - description: Page size
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Paginated Games
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get Paginated Games
      tags:
      - Game
  /api/v1/library/{user_id}:
    get:
      consumes:
      - application/json
      description: Get the user's library
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LibraryDTO'
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get favorite
      tags:
      - Library
  /api/v1/orders:
    get:
      consumes:
      - application/json
      description: Get a list of all orders in the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.OrderDTO'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get All Orders
      tags:
      - Orders
  /api/v1/orders/{order_id}:
    get:
      consumes:
      - application/json
      description: Get the details of a specific order by ID
      parameters:
      - description: Order ID
        in: path
        name: order_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.OrderDTO'
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get Order by ID
      tags:
      - Orders
  /api/v1/orders/{user_id}/create:
    post:
      consumes:
      - application/json
      description: Create a new order using the contents of the user's shopping cart
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.OrderDTO'
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create Order from Shopping Cart
      tags:
      - Orders
  /api/v1/orders/user/{user_id}:
    get:
      consumes:
      - application/json
      description: Get all orders of a specific user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.OrderDTO'
            type: array
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get User's Orders
      tags:
      - Orders
  /api/v1/restricts:
    get:
      consumes:
      - application/json
      description: Get all restricts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Restrict'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get All Restricts
      tags:
      - Restrict
    post:
      consumes:
      - application/json
      description: Create a new restrict entry
      parameters:
      - description: Restrict Data
        in: body
        name: restrict
        required: true
        schema:
          $ref: '#/definitions/dto.RestrictDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Restrict'
        "400":
          description: Validation Error
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create Restrict
      tags:
      - Restrict
  /api/v1/restricts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a restrict entry by ID
      parameters:
      - description: Restrict ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Restrict Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Delete Restrict
      tags:
      - Restrict
    get:
      consumes:
      - application/json
      description: Get a restrict entry by ID
      parameters:
      - description: Restrict ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Restrict'
        "404":
          description: Restrict Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Get Restrict
      tags:
      - Restrict
    patch:
      consumes:
      - application/json
      description: Update a restrict entry
      parameters:
      - description: Restrict ID
        in: path
        name: id
        required: true
        type: integer
      - description: Restrict Data
        in: body
        name: restrict
        required: true
        schema:
          $ref: '#/definitions/dto.RestrictDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Restrict'
        "400":
          description: Validation Error
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Restrict Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Update Restrict
      tags:
      - Restrict
  /api/v1/restricts/paginated:
    get:
      consumes:
      - application/json
      description: Get restricts with pagination
      parameters:
      - description: Page number
        in: query
        name: page
        required: true
        type: integer
      - description: Page size
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Paginated Restricts
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get Paginated Restricts
      tags:
      - Restrict
  /api/v1/reviews:
    post:
      consumes:
      - application/json
      description: Create a review for a specific game
      parameters:
      - description: Review details
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/models.Review'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Review'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create Review
      tags:
      - Review
  /api/v1/reviews/{review_id}:
    get:
      consumes:
      - application/json
      description: Get a specific review by its ID
      parameters:
      - description: Review ID
        in: path
        name: review_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Review'
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get Review by ID
      tags:
      - Review
  /api/v1/reviews/{review_id}/user/{user_id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific review
      parameters:
      - description: Review ID
        in: path
        name: review_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete Review
      tags:
      - Review
    patch:
      consumes:
      - application/json
      description: Update an existing review
      parameters:
      - description: Review ID
        in: path
        name: review_id
        required: true
        type: integer
      - description: Updated Review details
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/dto.ReviewDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Review'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update Review
      tags:
      - Review
  /api/v1/reviews/game/{game_id}:
    get:
      consumes:
      - application/json
      description: Get all reviews for a specific game
      parameters:
      - description: Game ID
        in: path
        name: game_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Review'
            type: array
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get Reviews by Game ID
      tags:
      - Review
  /api/v1/roles:
    get:
      description: This endpoint allows an admin to fetch all roles.
      produces:
      - application/json
      responses:
        "200":
          description: List of roles
          schema:
            items:
              $ref: '#/definitions/models.Role'
            type: array
        "403":
          description: Forbidden, only admins can access roles
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get all roles
      tags:
      - Roles
    post:
      consumes:
      - application/json
      description: This endpoint allows an admin to create a new role by providing
        the role type and description.
      parameters:
      - description: Role data
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/models.Role'
      produces:
      - application/json
      responses:
        "201":
          description: Role created successfully
          schema:
            $ref: '#/definitions/models.Role'
        "400":
          description: Invalid input
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden, only admins can create roles
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new role
      tags:
      - Roles
  /api/v1/roles/{role_id}:
    delete:
      description: This endpoint allows an admin to delete a role by its ID.
      parameters:
      - description: Role ID
        in: path
        name: role_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Role deleted successfully
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden, only admins can delete roles
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Role not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a role
      tags:
      - Roles
    get:
      description: This endpoint allows an admin to fetch a role by its ID.
      parameters:
      - description: Role ID
        in: path
        name: role_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Role found
          schema:
            $ref: '#/definitions/models.Role'
        "403":
          description: Forbidden, only admins can access roles
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Role not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get role by ID
      tags:
      - Roles
    patch:
      consumes:
      - application/json
      description: This endpoint allows an admin to update a role by providing its
        ID and new data.
      parameters:
      - description: Role ID
        in: path
        name: role_id
        required: true
        type: integer
      - description: Updated role data
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/models.Role'
      produces:
      - application/json
      responses:
        "200":
          description: Role updated successfully
          schema:
            $ref: '#/definitions/models.Role'
        "400":
          description: Invalid input
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden, only admins can update roles
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Role not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Update a role
      tags:
      - Roles
  /api/v1/users:
    get:
      consumes:
      - application/json
      description: Fetches a list of all users from the database. Only admins can
        access this endpoint.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved all users
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to fetch users
          schema:
            additionalProperties: true
            type: object
      summary: Get all users
      tags:
      - Users
  /api/v1/users/{user_id}:
    get:
      consumes:
      - application/json
      description: Fetches a Users by their ID from the database. The userControllers
        making the request must be authorized to access the requested user data. User
        can get access only to their data. Admin can get access to all users data.
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the userControllers data
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid userControllers ID
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to fetch userControllers
          schema:
            additionalProperties: true
            type: object
      summary: Get a User by ID
      tags:
      - Users
    patch:
      consumes:
      - application/json
      description: Allows updating specific fields of a User. The User making the
        request must be authorized to update the specified User data. User can update
        only their own data excluding role. Admin can update all users data.
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: User data to update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserUpdateDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated the user
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid input
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to update user
          schema:
            additionalProperties: true
            type: object
      summary: Update a User data
      tags:
      - Users
  /api/v1/users/paginated:
    get:
      consumes:
      - application/json
      description: Fetches a paginated list of users from the database. Only admins
        can access this endpoint.
      parameters:
      - default: 10
        description: Limit number of results
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the paginated users
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Invalid query parameters
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to fetch users
          schema:
            additionalProperties: true
            type: object
      summary: Get users with pagination
      tags:
      - Users
swagger: "2.0"
